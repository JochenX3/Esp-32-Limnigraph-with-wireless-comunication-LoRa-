// Libraries for Temp sensor
//#include <OneWire.h>
//#include <DallasTemperature.h>
//Libraries for LoRa
#include <SPI.h>
#include <LoRa.h>
//Libraries for OLED Display
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <OneWire.h>
#include <DallasTemperature.h>

//.......................Pines usados por el modulo transceptor LoRa.....................
#define SCK 5
#define MISO 19
#define MOSI 27
#define SS 18
#define RST 14
#define DIO0 26
//433E6 for Asia
//866E6 for Europe
//915E6 for North America
#define BAND 915E6
//....................Pines y Parametros por el Sensor Ultrasonico.......................
const int trigPin = 12;
const int echoPin = 13;
#define SOUND_SPEED 0.034
#define CM_TO_INCH 0.393701
long duracion;
float distanciaCm;
float distanciaInch;
//....................Pines y Parametros por el Sensor de Temperatura.......................
const int oneWireBus = 4;
OneWire oneWire(oneWireBus);
float temperatureC;
float temperatureF;
DallasTemperature sensors(&oneWire);

//---------------------
#define uS_TO_S_FACTOR 1000000
#define TIME_TO_SLEEP  10
#define node 2


void setup() 
{
  Serial.begin(115200);

  sensors.begin();
  
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  
  Serial.println("LoRa Sender Test");
  SPI.begin(SCK, MISO, MOSI, SS);
  LoRa.setPins(SS, RST, DIO0);
    if (!LoRa.begin(BAND)) 
    {
      Serial.println("Starting LoRa failed!");
      while (1);
   }
  Serial.println("LoRa Initializing OK!");
  delay(2000);
}


String comma = ",";

void loop()
{
      MedirNivel();
      MedirTemperatura();
      float temp = temperatureC;
      float level = distanciaCm;
      enviarLoRa(String(node)+comma+String(level)+comma+String(temp));
      Serial.println("Enviando: "+String(node)+comma+String(level)+comma+String(temp));
      Serial.println("Durmiendo en 100ms");
      Serial.flush();

           
      esp_sleep_enable_timer_wakeup(TIME_TO_SLEEP * uS_TO_S_FACTOR); 
      delay(1000);
      esp_deep_sleep_start();   
  
}

void enviarLoRa(String Payload)
{
  LoRa.beginPacket();
  LoRa.print(Payload);
  LoRa.endPacket();
}

String recibirLoRa()
{
  int packetSize = LoRa.parsePacket();
  String LoRaData;
  if (packetSize)
  {
      while (LoRa.available())
        {
          LoRaData = LoRa.readString();
        }
      }
    return LoRaData;
}

void MedirNivel() {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(20);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(20);
  digitalWrite(trigPin, LOW);
  duracion = pulseIn(echoPin, HIGH);
  distanciaCm = duracion * SOUND_SPEED/2;
  distanciaInch = distanciaCm * CM_TO_INCH;
}

void MedirTemperatura() {
  sensors.requestTemperatures(); 
  temperatureC = sensors.getTempCByIndex(0);
  temperatureF = sensors.getTempFByIndex(0);
}
